/* Set up ADC for capturing camera data */
void init_ADC0(void) {
  unsigned int calib;
  // Turn on ADC0
  //INSERT CODE HERE
  SIM_SCGC6 |= SIM_SCGC6_ADC0_MASK;
  // Single ended 16 bit conversion, no clock divider
  //INSERT CODE HERE
  ADC0_CFG1 |= ADC_CFG_MODE(3); // Set mode to 3 -- 16-bit conversion

  // Do ADC Calibration for Singled Ended ADC. Do not touch.
  ADC0_SC3 = ADC_SC3_CAL_MASK;
  while ( (ADC0_SC3 & ADC_SC3_CAL_MASK) != 0 );
  calib = ADC0_CLP0; calib += ADC0_CLP1; calib += ADC0_CLP2;
  calib += ADC0_CLP3; calib += ADC0_CLP4; calib += ADC0_CLPS;
  calib = calib >> 1; calib |= 0x8000;
  ADC0_PG = calib;
  
  // Select hardware trigger.
  //INSERT CODE HERE
  ADC0_SC2 |= ADC_SC2_ADTRG_MASK; // Set ADTRG bit to 1
  // Set to single ended mode	
  //INSERT CODE HERE
  ADC0_SC1 &= ~(ADC_SC1_DIFF_MASK); // Set DIFF bit to 0
  // Set up FTM2 trigger on ADC0
  SIM_SOPT7 |= SIM_SOPT7_ADC0TRGSEL(10); // FTM2 select
	SIM_SOPT7 |= SIM_SOPT7_ADC0ALTTRGEN_MASK; // Alternative trigger en.
	SIM_SOPT7 &= ~(SIM_SOPT7_ADC0PRETRGSEL_MASK); // Pretrigger A
  
	// Enable NVIC interrupt
  //INSERT CODE HERE
  NVIC_EnableIRQ(ADC0_IRQn);
}


/* Initialization of PIT timer to control 
* 		integration period
*/
void init_PIT(void){
	// Setup periodic interrupt timer (PIT)
	
	// Enable clock for timers
	//INSERT CODE HERE
	SIM_SCGC6 |= SIM_SCGC6_PIT_MASK;
	// Enable timers to continue in debug mode
	//INSERT CODE HERE // In case you need to debug
	
  PIT_MCR &= ~(PIT_MCR_MDIS_MASK);
  PIT_MCR &= ~(PIT_MCR_FRZ_MASK);
  
	// PIT clock frequency is the system clock
	// Load the value that the timer will count down from
	//INSERT CODE HERE
	PIT_LDVAL0 = DEFAULT_SYSTEM_CLOCK + INTEGRATION_TIME;
	// Enable timer interrupts
	//INSERT CODE HERE
	PIT_TCTRL0 |= PIT_TCTRL_TIE_MASK;
	// Enable the timer
	//INSERT CODE HERE
  PIT_TCTRL0 |= PIT_TCTRL_TEN_MASK;
	// Clear interrupt flag
	//INSERT CODE HERE
  PIT_TCTRL0 |= PIT_TFLG_TIF_MASK;
	// Enable PIT interrupt in the interrupt controller
	//INSERT CODE HERE
  NVIC_EnableIRQ(PIT0_IRQn);
	return;
}